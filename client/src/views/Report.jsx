import { useState, useEffect } from "react";
import { Card, CardBody, CardHeader, Typography, Select, Option } from "@material-tailwind/react";
import Chart from "react-apexcharts";
import { useQuery } from "@apollo/client";
import { GET_DataAi, GET_REPORT } from "../queries";
import { marked } from "marked";
import parse from "html-react-parser";
import Loading from "../components/Loading";
import logo from "../assets/o.png";

export default function Report() {
  const [year, setYear] = useState(new Date().getFullYear());
  const { loading, error, data, refetch } = useQuery(GET_REPORT, { variables: { year } });
  const { loading: loadingAI, error: errorAI, data: dataAI } = useQuery(GET_DataAi);

  useEffect(() => {
    refetch({ year });
  }, [year, refetch]);

  const chart = data?.getOrderChart;

  const chartConfig = {
    type: "pie",
    width: 500,
    height: 500,
    series: [chart?.totalAccept, chart?.totalReject, chart?.totalPending, chart?.totalNego],
    options: {
      chart: {
        toolbar: {
          show: true,
        },
      },
      title: {
        show: false,
      },
      dataLabels: {
        enabled: true,
      },
      colors: ["#020617", "#ff8f00", "#00897b", "#1e88e5", "#d81b60"],
      legend: {
        show: true,
      },
      labels: [`Total Accept : ${chart?.totalAccept}`, `Total Reject : ${chart?.totalReject}`, `Total Pending : ${chart?.totalPending}`, `Total Nego : ${chart?.totalNego}`],
    },
  };

  const customRenderer = (htmlString) => {
    return parse(htmlString, {
      replace: (domNode) => {
        if (domNode.name === "p") {
          domNode.attribs.class = "mb-4 text-gray-700";
        }
        if (domNode.name === "h1") {
          domNode.attribs.class = "text-2xl font-bold mb-2";
        }
        if (domNode.name === "h2") {
          domNode.attribs.class = "text-xl font-bold mb-2";
        }
        if (domNode.name === "h3") {
          domNode.attribs.class = "text-lg font-bold mb-2";
        }
        if (domNode.name === "ul") {
          domNode.attribs.class = "list-disc pl-5 mb-4";
        }
        if (domNode.name === "ol") {
          domNode.attribs.class = "list-decimal pl-5 mb-4";
        }
        if (domNode.name === "li") {
          domNode.attribs.class = "mb-2";
        }
      },
    });
  };

  const handleYearChange = (e) => {
    setYear(parseInt(e.target.value, 10));
  };

  return (
    <div className="min-h-screen bg-gradient-to-r from-[#fbc2eb] to-[#a6c0fe] p-4">
      <Card>
        <CardHeader floated={false} shadow={false} color="transparent" className="flex flex-col gap-4 rounded-none md:flex-row md:items-center">
          <div className="flex justify-between items-center w-full">
            <div className="flex items-center gap-2">
              <img src={logo} className="h-10 w-12" alt="Company Logo" />
              <Typography variant="h6" color="blue-gray">
                Report
              </Typography>
            </div>
            {/* <div className="flex items-center gap-2">
              <Typography variant="small" color="blue-gray">
                Year:
              </Typography>
              <Select value={year} onChange={handleYearChange} className="w-32">
                {Array.from({ length: 10 }, (_, i) => new Date().getFullYear() - i).map((year) => (
                  <Option key={year} value={year}>
                    {year}
                  </Option>
                ))}
              </Select>
            </div> */}
          </div>
        </CardHeader>
        <CardBody className="mt-4 grid place-items-center px-2">
          {loading ? (
            <div className="flex items-center justify-center h-full w-full">
              <Loading />
            </div>
          ) : (
            <>
              <Chart {...chartConfig} />
              <Typography variant="h6" color="blue-gray" className="mr-32">
                Total: {chart?.totalRequest}
              </Typography>
            </>
          )}
        </CardBody>
      </Card>

      <Card className="mt-10">
        <CardHeader floated={false} shadow={false} color="transparent" className="flex flex-col gap-4 rounded-none md:flex-row md:items-center">
          <div className="flex items-center gap-2">
            <img src={logo} className="h-10 w-12" alt="Company Logo" />
            <Typography variant="h6" color="blue-gray">
              AI Report
            </Typography>
          </div>
          <Typography variant="small" color="gray" className="max-w-sm font-normal">
            Generated by AI based on the data.
          </Typography>
        </CardHeader>
        <CardBody className="mt-4 grid place-items-center px-2">
          {loadingAI ? (
            <div className="flex items-center justify-center h-full w-full">
              <Loading />
            </div>
          ) : (
            <Typography variant="h6" color="blue-gray" className="mr-32">
              {customRenderer(marked.parse(dataAI?.getPromptedAI))}
            </Typography>
          )}
        </CardBody>
      </Card>
    </div>
  );
}
